Apple ii graphics experiments

1. Text io: reverse a string
2. Guessing game
3. Draw chessboard
4. Paint the screen naively, see if you can see the screen tearing. (On keypress)
5. Double buffer, be able to toggle between both low res screens.(on keypress)

6. Figure out how hi-res graphics work:
* draw 0x00 thru 0xff tiling the screen, and see what it looks like.
    * diversion: figure out how to configure the compiler
      for a different load address (done!)

    ^ LEFT OFF HERE ^

7. double-hi-res ??

8. Draw RC logo in hi res. On keypress toggle b/w white and green.
9. Tile the screen with the Pac-Man ghost outline, to prove out single color hi res

10. Display a 2-bit color still from a Pokémon game — might be harder and involve converting between image formats (could be a fun pairing project)
11. Pumpkin game-of-life (could be good for pairing)



Do something to play around with double low-res? (I guess that’s only 80 x 48, but it’s better than low-low res)

Explore double hi res. Supposedly this gives us access to the full 16-color palette. (Q: does it change the number of distinct visible pixels, compared to normal hi res? Unclear so far, but sounds like yes? Except they mention a sliding(?) window which is odd…)



Other ideas:
* maze generator
    * seems like there's wall glyphs!
    * https://en.wikipedia.org/wiki/Apple_II_character_set
        UPDATE: haha just kidding, this wiki page is completely wrong
        See: https://retrocomputing.stackexchange.com/questions/8652
* game of life but with ghosts (multi-color!)
* rc logo bit.ly/2P0qu6N
* wordle (credit sengmin for the idea)
    * word//e ?
(these ones might be easier in rust):
* footsies
* chess
* go
* hi-res fractals
* tetris
* pokemon sokoban (can we do hi-res greyscale if we use a monochrome display?)
* snakes and ladders
* Typeracer / some kind of typing test
* 2048

Existing projects to save to floppies:
* snake
* mazes
* ghosts / pumpkins (sides A/B)
    (might want to translate to C first)
* sokoban (basic, C) (sides A/B)

Misc:
* stream images directly to the screen buffer over audio ??
    (think about this a bit; are there any cool ways to apply it?)
> It's probably pretty slow, so it wouldn't be great for video.
> I guess you could do like a slideshow or something...
> (Maybe a simple visualizion of the data transfer speed?)

> Riffing on the slideshow idea, it would be cool to have a program that
> takes in a list of images, and draws them to the screen in sequence.
> If we did that with a bunch of stills from an old nintendo game that
> could be pretty nice.
> This would require getting hi-res graphics working, and could be a cool
> target project to motivate that.
