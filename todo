    Game ideas:

* 2048
    * see old rust repo for ui design / todos
* word//e (credit sengmin for the idea)
  * some UI questions about this
    * how many "colors" will we need? Is normal, inverse, flashing enough?
        * maybe double low-res hand-drawn letters ?
    * we'll need a word bank for this I think... will it fit into RAM?
        Will lookups be fast enough??
        (trie data structure??)
* maze generator
    * double low-res would be a good fit
* ghosts (translate from BASIC)
* pumpkins (already have the sprites)
    * game of life
* game of life but with ghosts (multi-color!)
    * hi-res!

    Harder (save these for if/when rust is working):

* footsies
* chess
* go
* hi-res fractals
* tetris
* pokemon sokoban (can we do hi-res greyscale if we use a monochrome display?)
* snakes and ladders (credit Sergey)
* Typeracer / some kind of typing test
* battleships

---

    Misc:

Look at how Cactus did CHIP-8 in Rust, for ideas & to compare.

Physical floppies

Apple LOGO
* Russ Webb offered to give me a lesson :)

C docs
* flesh these out at some point
* include example programs from 2e/c ?
    * these are nice stepping stones / tutorials, in a way

Floppy docs

Tower of emulators

---

    Projects:

guessing-game
sokoban-c
tron
6502 demo program

---

    emu:

[x] Easy 6502 tutorial
[x] Read this code: https://skilldrick.github.io/easy6502/simulator.html
[x] Adapt the above demo to run on the Apple II
    - The nice thing about this is it doesn't require any keyboard input
    - It does need randomness, but it's ok if the seed is the same every time.
[x] CHIP-8 interpreter

6502 > SWEET16 > n2t > CHIP-8

candidate order:
0. rust > chip8
1a. rust > n2t
1b. sweet16 > n2t
2. 6502 > sweet16

---

    Hi-res stuff:

At some point, come back to this video https://www.cs.columbia.edu/~sedwards/2020-vcfw-6502/ and re-watch from 19:30 onwards.

Got stuck trying to repro the demo from https://www.1000bit.it/support/manuali/apple/technotes/aiie/tn.aiie.03.html (section: Using AUXMOVE)
Things to look into:
* is the code for AUXMOVE where it's supposed to be in memory? try dumping it
* are we supplying the arguments correctly?
Note: (their suggestion of 3^P<CR> is indeed helpful)

This is a great image for testing (normal hi-res) rendering; taken from Karateka:
https://i.pinimg.com/736x/f5/c3/95/f5c3950416d58744f6d92cb4b46f29e3.jpg

1. Display RC logo in HGR (white on black)
1.a. draw the same, but using green
2. tile the screen w/ the pacman ghost outline (white)
2.a. make the ghosts different colors
3. draw pumpkin in HGR
3.a. draw RC logo in "full color" -- white bg, black frame, green "text"
4. try the ghost demo again, but with all 16 colors, using DHGR
Note that some of these may need a different load address, or to leave a "gap".
See cc65 examples/ for insp.
5. Pumpkin game-of-life (could be good for pairing)
6. Display a 2-bit color still from a Pokémon game — might be harder and involve converting between image formats (could be a fun pairing project)
    * see photo of pen&paper notes on phone for ideas about the mapping

Figure out how hi-res graphics work...
    UPDATE: I've made a lot of progress, but wow it's complicated
Double-hi-res
    (in some ways, simpler; but if you use the simple mental model, there's
    certain to be artifacts in the images. I can live with that.)
