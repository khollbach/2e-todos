    Projects:

guessing-game
sokoban-c
tron
6502 demo program

---

    Game ideas:

* 2048
    * see old rust repo for ui design / todos
* word//e (credit sengmin for the idea)
  * some UI questions about this
    * how many "colors" will we need? Is normal, inverse, flashing enough?
        * maybe double low-res hand-drawn letters ?
    * we'll need a word bank for this I think... will it fit into RAM?
        Will lookups be fast enough??
        (trie data structure??)
* maze generator
    * double low-res would be a good fit
* ghosts (translate from BASIC)
* pumpkins (already have the sprites)
    * game of life
* game of life but with ghosts (multi-color!)
    * hi-res!

    Harder (save these for if/when rust is working):

* footsies
* chess
* go
* hi-res fractals
* tetris
* pokemon sokoban (can we do hi-res greyscale if we use a monochrome display?)
* snakes and ladders (credit Sergey)
* Typeracer / some kind of typing test
* battleships

---

    Floppies

Motivation: both Russ and Julien said they'd be interested.
End goal: get an Apple LOGO disk image written to a physical floppy disk.
Then you can play around with the actual programming language!

Steps:
1. find and download a LOGO .dsk image
2. test it on the //e emulator online, to verify
3. read the ADTPro docs and figure out which path we need to take
4. follow the steps in their tutorial, which probably involves
4.a. bootstrapping a ProDOS disk
4.b. using ProDOS(?) to transfer a disk image (LOGO) to another disk
5. test it out, and celebrate when it works!

Update: ok so it mostly works. We got the ADTPro client software disk image on
a physical floppy, and we can use that to talk both ways with a laptop. (The
usb to mic/speaker adapter works for this.) Using this setup, we got LOGO.dsk
onto a physical floppy, and we can boot it up, and it works.
However, when trying to write the sample-programs and docs disks, I had
trouble: the ADTPro client would show an 'X' in the loading bar instead of a
'W' when trying to write, and the disk drive made a weird sound. I'm not sure
what the issue was, and there are lots of possible causes (Julien had lots of
great ideas):
* "write protection" on physical disks -- when the disk is facing up, there's a
  hole punched out of it, but when it's facing down the hole is one the other
  side. (There was also a disk at the hub that had been masking-taped over to
  un-do the hole, which is interesting...)
* copy-protection on the floppy images: they might have weird, unsupported
  quirks in the data (e.g. bits set that never should be) or something to try
  to prevent people from making copies of the disks.
* (a mistake I *keep* making: forgetting to format the disk first. The file
  xfer step in ADTPro does *not* format the disk first, so remember to do that
  step!)
* (hopefully not an issue with the drive? but it's certainly possible)
There's lots of things it could be, so take a deliberate approach to debugging.
First try to re-pro what already worked, and then make incremental changes and
verify as you go.
NOTE: The ADTPro disk and LOGO disk are successfully copied, but the back side
of the LOGO disk (which should be the LOGO TOOLKIT iirc?) and both sides of the
second disk (which should be LOGO SAMPLE PROGS and LOGO TK DOCS) aren't yet
written, so the stickers on the disks aren't *yet* honest. (but hopefully soon)

---

    Misc stuff:

Random thought: it'd be really cool to add cassette I/O support to //jse
* how hard would this be?
    (probably a pretty serious project...)

SIM-8800 -- https://pocorgtfo.hacke.rs/pocorgtfo20.pdf
[x] read the rest of the article
[ ] run their simulator on the //e
    * unzip the file
    * try it in // jse
    * run it for real
    * maybe put it on a floppy?

Look into PLASMA at some point, seems cool:
    https://github.com/dschmenk/plasma

---

    Hi-res stuff:

At some point, come back to this video https://www.cs.columbia.edu/~sedwards/2020-vcfw-6502/ and re-watch from 19:30 onwards.

Got stuck trying to repro the demo from https://www.1000bit.it/support/manuali/apple/technotes/aiie/tn.aiie.03.html (section: Using AUXMOVE)
Things to look into:
* is the code for AUXMOVE where it's supposed to be in memory? try dumping it
* are we supplying the arguments correctly?
Note: (their suggestion of 3^P<CR> is indeed helpful)

This is a great image for testing (normal hi-res) rendering; taken from Karateka:
https://i.pinimg.com/736x/f5/c3/95/f5c3950416d58744f6d92cb4b46f29e3.jpg

The prince of persia title screen is DHGR iirc, so that'd be a great choice for testing double hires.

Misc thing:
* recreate the Ness peace sign sprite on the //e (see DMs w/ Evan)

Pixel editor project:
* demo complete!
  * we can draw things, and then have them show up on the screen
  * we were also able to hardcode a black&white image file, and display that
  * in progress: user-uploaded images
    * tricky part: converting them into reasonable-looking black&white versions
    * played around with HSL colorspace and got a tandy logo to show up, which was cool
* possible future extension: DHGR

More misc things to check out:
* https://github.com/Michaelangel007/apple2_hgrbyte
* http://wsxyz.net/tohgr.htmla
* https://lukazi.blogspot.com/2017/03/double-high-resolution-graphics-dhgr.html
* https://retrocomputing.stackexchange.com/questions/2595/does-every-retrocomputer-and-console-with-ntsc-composite-output-have-artifact-c
* https://int10h.org/blog/2015/04/cga-in-1024-colors-new-mode-illustrated/
* https://retrocomputing.stackexchange.com/questions/19509/apple-ii-double-buffering-and-double-high-resolution
* https://nerdlypleasures.blogspot.com/2021/10/apple-ii-composite-artifact-color-ntsc.html
* https://www.applefritter.com/content/wanted-schematic-good-color-killer-circuits-apple-ii

1. Display RC logo in HGR (white on black)
1.a. draw the same, but using green
2. tile the screen w/ the pacman ghost outline (white)
2.a. make the ghosts different colors
3. draw pumpkin in HGR
3.a. draw RC logo in "full color" -- white bg, black frame, green "text"
4. try the ghost demo again, but with all 16 colors, using DHGR
Note that some of these may need a different load address, or to leave a "gap".
See cc65 examples/ for insp.
5. Pumpkin game-of-life (could be good for pairing)
6. Display a 2-bit color still from a Pokémon game — might be harder and involve converting between image formats (could be a fun pairing project)
    * see photo of pen&paper notes on phone for ideas about the mapping
    * also: I'm pretty sure black->purple->green->white would look really good

---

6502 > SWEET16 > n2t > CHIP-8

[x] 0. rust > chip8
[ ] 1. sweet16 > n2t
[ ] 2. 6502 > sweet16

---

n2t on Apple II
* either via 6502, SWEET16, or C
    * maybe even via translation from hack machine code to 6502 ?
    * the n2t instruction memory is read-only, so this actually might work
* need to adapt screen size
    * there are probably a few different ways to do this...
    * simplest is just draw only even rows and cols; probably will look pretty good

Also what about translating or emulating wasm or riscv or something? That could be neat, and maybe an avenue to get Rust running on the //e.
* Or maybe an LLVM (or MLIR or w/e) backend -- is this a feasibly-sized project?

Currently learning more 6502 / SWEET16

---

Other ideas

Display color images / slideshow
(2-bit color ???)
(or normal HGR or DHGR)
(either from OG images, or converting to closest match)
n2t emulator / translator
SIM-8800
DHGR tutorial: AUXMOVE?
